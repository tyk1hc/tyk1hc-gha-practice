name: "Terraform Initial"

on:
  workflow_call:
    inputs:
      param_env: # Environment
        required: true
        type: string
      param_runner: # Runner
        required: true
        type: string
      param_resource_group_name: # Resource Group Name
        required: true
        type: string
      param_resource_group_location: # Resource Group Location
        required: true
        type: string
      param_storage_account_name: # Storage Account Name
        required: true
        type: string
      param_storage_account_location: # Storage Account Location
        required: true
        type: string
      param_storage_container_name: # Storage Container Name
        required: true
        type: string
      param_storage_blob_name: # Storage Blob Name
        required: true
        type: string
    secrets:
      param_azure_credentials: # Credentials
        required: true
    outputs:
      azure-resource-group-result:
        description: "Azure Resource Group Result"
        value: ${{ jobs.step-id-create-azure-rg.outputs.create-rg-result-output }}

jobs:
  # Create Terraform Backend State Storage
  create-azure-resource-group:
    name: Create Azure Resource Group
    runs-on: ${{ inputs.param_runner }}
    #environment: ${{ inputs.param_env }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    outputs:
      create-rg-result-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-rg-result }}

    steps:
      # Login to Azure with Service Principal
      - name: Login to Azure with Service Principal
        uses: Azure/login@v2
        with:
          creds: "${{ secrets.param_azure_credentials }}"

      - name: Create Azure Resource Group
        id: step-id-create-azure-rg
        uses: azure/cli@v2
        with:
          inlineScript: |
            az version

            echo ${{inputs.param_resource_group_name}}

            # Check and create terraform remote state resource group
            if [ $(az group exists --name ${{inputs.param_resource_group_name}}) = false ]; then
              az group create --name ${{inputs.param_resource_group_name}} --location ${{ inputs.param_resource_group_location}}
              echo "step-output-rg-result = ${{inputs.param_resource_group_name}} Created Successfully!"
            else
              echo "step-output-rg-result = ${{inputs.param_resource_group_name}} already exist!"
            fi

            echo ${{ inputs.param_storage_account_name }}

            # Check and create terraform remote state storage account
            if [ $(az group exists --name ${{inputs.param_storage_account_name}}) = null ]; then
              echo "null"
            else
              echo "not null"
            fi