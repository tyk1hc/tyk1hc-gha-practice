name: "Terraform Initial"

on:
  workflow_call:
    inputs:
      param_env: # Environment
        required: true
        type: string
      param_runner: # Runner
        required: true
        type: string
      param_resource_group_name: # Resource Group Name
        required: true
        type: string
      param_resource_group_location: # Resource Group Location
        required: true
        type: string
      param_storage_account_name: # Storage Account Name
        required: true
        type: string
      param_storage_account_location: # Storage Account Location
        required: true
        type: string
      param_storage_container_name: # Storage Container Name
        required: true
        type: string
      param_storage_blob_name: # Storage Blob Name
        required: true
        type: string
    secrets:
      param_azure_credentials: # Credentials
        required: true
    outputs:
      azure-resource-group-result:
        description: "Azure Resource Group Result"
        value: ${{ jobs.step-id-create-azure-rg.outputs.create-rg-result-output }}

jobs:
  # Create Terraform Backend State Storage
  create-azure-resource-group:
    name: Create Azure Resource Group
    runs-on: ${{ inputs.param_runner }}
    #environment: ${{ inputs.param_env }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    outputs:
      create-rg-result-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-rg-result }}
      create-storage-account-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-storage-account-result }}
      create-storage-container-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-storage-container-result }}
    steps:
      # Login to Azure with Service Principal
      - name: Login to Azure with Service Principal
        uses: Azure/login@v2
        with:
          creds: "${{ secrets.param_azure_credentials }}"

      - name: Create Azure Resource Group
        id: step-id-create-azure-rg
        uses: azure/cli@v2
        with:
          inlineScript: |
            az version

            resourceGroupName=${{inputs.param_resource_group_name}}
            resourceGroupLocation=${{ inputs.param_resource_group_location}}
            storageAccountName=${{ inputs.param_storage_account_name }}
            storageAccountLocation=${{ inputs.param_storage_account_location }}
            storageAccountContainerName=${{ inputs.param_storage_container_name }}
            storageAccountBlobName=${{ inputs.param_storage_blob_name }}

            echo $resourceGroupName

            # Check and create terraform remote state RESOURCE GROUP
            if [ $(az group exists --name $resourceGroupName) = false ]; then
              az group create --name $resourceGroupName --location $resourceGroupLocation
              echo "step-output-rg-result = $resourceGroupName created successfully!"
            else
              echo "step-output-rg-result = $resourceGroupName already exist!"
            fi

            echo "------------Storage Account Name:  $storageAccountName ------------------------------------"

            # Check and create terraform remote state STORAGE ACCOUNT
            isStorageAccountExist=$(az storage account check-name --name $storageAccountName --query nameAvailable)
            if [ $isStorageAccountExist = true ]; then
              az storage account create --name $storageAccountName --resource-group $resourceGroupName --location $storageAccountLocation --sku Standard_LRS --encryption-services blob
              echo "step-output-storage-account-result = $storageAccountName created successfully!"
            else
              echo "step-output-storage-account-result = $storageAccountName already exist!"
            fi

            # Check and create terraform remote state STORAGE CONTAINER
            if [ $isStorageAccountExist = false ]; then
              # Get storage account key
             
            else
            fi