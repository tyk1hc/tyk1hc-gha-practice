name: "Deploy Azure Infra - Detail"

on:
  workflow_call:
    inputs:
      param_env: # Environment
        required: true
        type: string
      param_runner: # Runner
        required: true
        type: string
      param_resource_group_name: # Resource Group Name
        required: true
        type: string
      param_resource_group_location: # Resource Group Location
        required: true
        type: string
      param_storage_account_name: # Storage Account Name
        required: true
        type: string
      param_storage_account_location: # Storage Account Location
        required: true
        type: string
      param_storage_container_name: # Storage Container Name
        required: true
        type: string
      param_storage_blob_name: # Storage Blob Name
        required: true
        type: string
      param_working_directory: # Working Directory
        required: true
        type: string
    secrets:
      param_azure_credentials: # Credentials
        required: true
      param_azure_client_id: # Client Id
        required: true
      param_azure_subscription: # Azure Subscription
        required: true
      param_azure_tenant: # Azure Tenant
        required: true
    outputs:
      azure-resource-group-result:
        description: "Azure Resource Group Result"
        value: ${{ jobs.step-id-create-azure-rg.outputs.create-rg-result-output }}

permissions:
  id-token: write
  contents: read

jobs:
  # Create Terraform Backend State Storage
  create-azure-resource-group:
    name: Create Azure Resource Group
    runs-on: ${{ inputs.param_runner }}
    environment: ${{ inputs.param_env }}

    env:
      ARM_CLIENT_ID: ${{ secrets.param_azure_client_id }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.param_azure_subscription }}
      ARM_TENANT_ID: ${{ secrets.param_azure_tenant }}
      AZURE_LEARNING_CREDENTIALS: ${{ secrets.param_azure_credentials }}

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.param_working_directory }}

    outputs:
      create-rg-result-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-rg-result }}
      create-storage-account-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-storage-account-result }}
      create-storage-container-output: ${{ steps.step-id-create-azure-rg.outputs.step-output-storage-account-container-result }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      # Login to Azure with Service Principal
      - name: Login to Azure with OIDC
        uses: Azure/login@v2
        with:
          creds: ${{ env.AZURE_LEARNING_CREDENTIALS }}

      - name: Create Azure Resource Group
        id: step-id-create-azure-rg
        uses: azure/cli@v2
        with:
          inlineScript: |
            az version

            AZ_CLI_RESOURCE_GROUP_NAME=${{inputs.param_resource_group_name}}
            AZ_CLI_RESOURCE_GROUP_LOCATION=${{ inputs.param_resource_group_location}}
            AZ_CLI_STORAGE_ACCOUNT_NAME=${{ inputs.param_storage_account_name }}
            AZ_CLI_STORAGE_ACCOUNT_LOCATION=${{ inputs.param_storage_account_location }}
            AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME=${{ inputs.param_storage_container_name }}
            AZ_CLI_STORAGE_ACCOUNT_BLOB_NAME=${{ inputs.param_storage_blob_name }}
            AZ_CLI_WORKING_DIRECTORY=${{ inputs.param_working_directory }}/${{inputs.param_env}}

            echo "-------------Resource Group Name: $AZ_CLI_RESOURCE_GROUP_NAME --------------------------------------"

            # Check and create terraform remote state RESOURCE GROUP
            if [ $(az group exists --name $AZ_CLI_RESOURCE_GROUP_NAME) = false ]; then
              az group create --name $AZ_CLI_RESOURCE_GROUP_NAME --location $AZ_CLI_RESOURCE_GROUP_LOCATION
              echo "step-output-rg-result = $AZ_CLI_RESOURCE_GROUP_NAME created successfully!"
            else
              echo "step-output-rg-result = $AZ_CLI_RESOURCE_GROUP_NAME already exist!"
            fi

            echo "------------Storage Account Name: $AZ_CLI_STORAGE_ACCOUNT_NAME ------------------------------------"

            # Check and create terraform remote state STORAGE ACCOUNT
            AZ_CLI_IS_STORAGE_ACCOUNT_EXIST=$(az storage account check-name --name $AZ_CLI_STORAGE_ACCOUNT_NAME --query nameAvailable)
            if [ $AZ_CLI_IS_STORAGE_ACCOUNT_EXIST = true ]; then
              az storage account create --name $AZ_CLI_STORAGE_ACCOUNT_NAME --resource-group $AZ_CLI_RESOURCE_GROUP_NAME --location $AZ_CLI_STORAGE_ACCOUNT_LOCATION --sku Standard_LRS --encryption-services blob
              echo "step-output-storage-account-result = $AZ_CLI_STORAGE_ACCOUNT_NAME created successfully!"
            else
              echo "step-output-storage-account-result = $AZ_CLI_STORAGE_ACCOUNT_NAME already exist!"
            fi

            echo "-------------Storage Account Container Name: $AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME ---------------"

            # Check and create terraform remote state STORAGE CONTAINER
            if [ $AZ_CLI_IS_STORAGE_ACCOUNT_EXIST = false ]; then
              # Get storage account key
              AZ_CLI_ACCOUNT_KEY=$(az storage account keys list --resource-group $AZ_CLI_RESOURCE_GROUP_NAME --account-name $AZ_CLI_STORAGE_ACCOUNT_NAME --query [0].value -o tsv)
              AZ_CLI_ACCOUNT_CONTAINER_EXISTS=$(az storage container exists --account-name $AZ_CLI_STORAGE_ACCOUNT_NAME --account-key $AZ_CLI_ACCOUNT_KEY --name $AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME --query exists)

              if [ $AZ_CLI_ACCOUNT_CONTAINER_EXISTS = false ]; then
                az storage container create --name $AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME --account-name $AZ_CLI_STORAGE_ACCOUNT_NAME
                echo "step-output-storage-account-container-result = $AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME created successfully!"
              else
                echo "step-output-storage-account-container-result = $AZ_CLI_STORAGE_ACCOUNT_CONTAINER_NAME already exist!"
              fi
            fi

      - name: Create Backend.tf New
        run: |
          pwd

          cat > backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "${{inputs.param_resource_group_name}}"
              storage_account_name = "${{ inputs.param_storage_account_name }}"
              container_name       = "${{ inputs.param_storage_container_name }}"
              key                  = "${{ inputs.param_storage_blob_name }}"
              client_id            = "${{ env.ARM_CLIENT_ID }}"
              subscription_id      = "${{ env.ARM_SUBSCRIPTION_ID }}"
              tenant_id            = "${{ env.ARM_TENANT_ID }}"
            }

            required_providers {
              azurerm = {
                version = ">=3.0.0"
                source  = "hashicorp/azurerm"
              }
            }
          }
          EOF

      #    cat backend.tf

      # Install the latest version of Terraform CLI
      - name: Install Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.1.7"
          terraform_wrapper: false

      - name: Terraform Init
        id: init
        run: |
            # Initialize a new or existing Terraform working directory by creating initial files,
            # loading any remote state, downloading modules, etc.
            terraform init

            # Either use the backend.tf file with the config inside or use the following command line
            # terraform init -backend-config="storage_account_name=$STORAGE_ACCOUNT_NAME" \
            #                -backend-config="container_name=$CONTAINER_NAME" \
            #                -backend-config="resource_group_name=$RESOURCE_GROUP_NAME"

      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        id: format
        run: terraform fmt -check
        continue-on-error: true
